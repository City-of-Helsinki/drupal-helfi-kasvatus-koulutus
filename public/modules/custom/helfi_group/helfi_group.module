<?php

/**
 * @file
 * Helfi Group module handles customizations for the group module.
 */

declare(strict_types=1);

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultAllowed;
use Drupal\Core\Access\AccessResultNeutral;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\helfi_group\UnitFormAlter;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\node\NodeInterface;

/**
 * Implements hook_preprocess_HOOK().
 *
 * Adds parent menu link's title and URL to the group menu.
 */
function helfi_group_preprocess_block(&$variables) {
  if ($variables['base_plugin_id'] !== 'group_content_menu') {
    return;
  }

  if (empty($variables['content']['#items'])) {
    return;
  }

  $current_level_menu_item = reset($variables['content']['#items']);
  if (!isset($current_level_menu_item['original_link'])) {
    return;
  }

  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');

  if ($parent = $current_level_menu_item['original_link']?->getParent()) {
    if ($parent_item = $menu_link_manager->createInstance($parent)) {
      $variables['menu_link_parent'] = [
        'title' => $parent_item->getTitle(),
        'url' => $parent_item->getUrlObject(),
      ];

      // Check if current page is the same as the item used as parent and
      // assign a boolean to enable aria-current="page" attribute on dom.
      $current_item_url = $parent_item->getUrlObject();
      $current_item_path = '/' . $current_item_url->getInternalPath();

      $current_path = \Drupal::service('path.current')->getPath();

      if ($current_item_path == $current_path) {
        $variables['menu_link_parent_is_current'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_theme().
 *
 * Overrides templates.
 */
function helfi_group_theme($existing, $type, $theme, $path) {
  return [
    'block__group_content_menu' => [
      'template' => 'block--group-content-menu',
      'base hook' => 'block',
    ],
    'menu__group_menu' => [
      'template' => 'menu--group-menu',
      'base hook' => 'menu__group_menu',
    ],
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function helfi_group_form_tpr_unit_form_alter(&$form, FormStateInterface $form_state) {
  \Drupal::classResolver(UnitFormAlter::class)
    ->alter($form, $form_state);
}

/**
 * Allow users with edit access to nodes to publish/unpublish them.
 *
 * Implements hook_entity_field_access().
 */
function helfi_group_entity_field_access(
  $operation,
  FieldDefinitionInterface $field_definition,
  AccountInterface $account,
  ?FieldItemListInterface $items = NULL,
) {
  if ($field_definition->getname() == 'status' && !empty($items)) {
    /** @var \Drupal\node\Entity\Node $entity */
    $entity = $items->getEntity();

    if ($entity->getEntityTypeId() == 'node') {
      if ($account->hasPermission("edit any {$entity->bundle()} content")) {
        return new AccessResultAllowed();
      }

      if (
        $entity->getOwnerId() == $account->id() &&
        $account->hasPermission("edit own {$entity->bundle()} content")) {
        return new AccessResultAllowed();
      }
    }
  }
  return new AccessResultNeutral();
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Removes duplicate local task from group nodes view page.
 */
function helfi_group_menu_local_tasks_alter(&$data, $route_name): void {
  $local_task = 'helfi_group.view_group';
  if (!isset($data['tabs'][0][$local_task])) {
    return;
  }

  $routes = ['view.group_nodes.page_1'];
  if (in_array($route_name, $routes)) {
    unset($data['tabs'][0][$local_task]);
  }
}

/**
 * Implements hook_entity_create_access().
 *
 * For unknown reason the route for adding media as a value to a field
 * is null when using media library on news item main image with school editor
 * role. This hook will allow access to school editors to add the media
 * references when creating new news item content.
 *
 * @see Drupal\media_library\MediaLibraryFieldWidgetOpener()
 */
function helfi_group_node_create_access(AccountInterface $account, array $context, $entity_bundle) {
  if (!empty(\Drupal::routeMatch()->getRouteName())) {
    return AccessResult::neutral();
  }

  return (
    $entity_bundle === 'news_item' &&
    in_array('school_editor', $account->getRoles())
  )
    ? AccessResult::allowed()
    : AccessResult::neutral();
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * #UHF-8926 Group menu emits menu parent from entity's translation form.
 * Make sure menu_parent is always set.
 */
function helfi_group_form_menu_link_content_form_alter(&$form, FormStateInterface $form_state) {
  $formObject = $form_state->getFormObject();
  assert($formObject instanceof EntityFormInterface);

  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $formObject->getEntity();
  $menu_name = $entity->get('menu_name')->value;
  if (
    !$menu_name ||
    !str_contains($menu_name, 'group') ||
    isset($form['menu_parent'])
  ) {
    return;
  }

  $form['menu_parent']['#type'] = 'hidden';
  $menu_parent = sprintf('%s:%s', $menu_name, $entity->get('parent')->value);
  $form['menu_parent']['#value'] = $menu_parent;
}

/**
 * Implements hook_module_implements_alter().
 *
 * #UHF-8926 the form alter must be run after group content menu's alter.
 * Otherwise, the changes made in "menu"-render array would be overridden.
 */
function helfi_group_module_implements_alter(&$implementations, $hook) : void {
  if ($hook === 'form_alter' && isset($implementations['helfi_group'])) {
    $group = $implementations['helfi_group'];
    unset($implementations['helfi_group']);
    $implementations['helfi_group'] = $group;
  }
}

/**
 * Implements hook_form_node_form_alter().
 */
function helfi_group_form_node_form_alter(
  array &$form,
  FormStateInterface $form_state,
): void {
  $form['actions']['submit']['#submit'][] = 'helfi_group_menuitem_set_content_translation_status';

  $formObject = $form_state->getFormObject();
  assert($formObject instanceof EntityFormInterface);
  $entity = $formObject->getEntity();

  if (isset($form['menu']) && array_key_exists('link', $form['menu'])) {
    if ($entity instanceof NodeInterface) {
      /** @var \Drupal\node\NodeTypeInterface $type */
      $type = $entity->get('type')
        ->entity;

      $type_menus_ids = $type
        ->getThirdPartySetting('menu_ui', 'available_menus', ['main']);

      if (empty($type_menus_ids)) {
        // Hide menu selector if node type has no available menus.
        $form['menu']['#access'] = FALSE;

        return;
      }
    }
    $menu_parent = $form['menu']['link']['menu_parent']['#default_value'];

    if (!$menu_parent) {
      return;
    }

    $menu_name = explode(':', $menu_parent)[0];
    if (!str_contains($menu_name, 'group')) {
      return;
    }

    $result = \Drupal::entityQuery('menu_link_content')
      ->condition('link.uri', "entity:node/{$entity->id()}")
      ->condition('menu_name', [$menu_name], 'IN')
      ->sort('id', 'ASC')
      ->accessCheck(FALSE)
      ->range(0, 1)
      ->execute();

    if (!$result) {
      return;
    }

    $current_language = $entity
      ->language()
      ->getId();

    $menu_link_content_id = reset($result);
    $menu_link_content = MenuLinkContent::load($menu_link_content_id);
    if (!$menu_link_content || !$menu_link_content->hasTranslation($current_language)) {
      return;
    }

    $menu_link_content = $menu_link_content->getTranslation($current_language);
    $status = $menu_link_content->get('content_translation_status')->value;
    $form['menu']['content_translation_status']['#default_value'] = $status;
    // @phpcs:ignore
    $form['menu']['content_translation_status']['#description'] = 'TÃ¤mÃ¤ arvo muuttuu automaattisesti tallentaessa sisÃ¤llÃ¶n julkaisutilan mukaan.';
  }

}

/**
 * Submit handler to set menu items translation status.
 *
 * @param array $form
 *   The form.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function helfi_group_menuitem_set_content_translation_status(
  array &$form,
  FormStateInterface $form_state,
) : void {
  $menu_parent = $form['menu']['link']['menu_parent']['#default_value'];
  if (!$menu_parent) {
    return;
  }
  $menu_name = explode(':', $menu_parent)[0];

  $formObject = $form_state->getFormObject();
  assert($formObject instanceof EntityFormInterface);

  $values = $form_state->getValue('menu');
  /** @var \Drupal\node\NodeInterface $node */
  $node = $formObject->getEntity();
  $langCode = $node->language()->getId();
  $link = MenuLinkContent::load($values['entity_id']);
  if (
    empty($values['entity_id']) ||
    !$link ||
    !str_contains($menu_name, 'group')
  ) {
    return;
  }
  if ($link->hasTranslation($langCode)) {
    $link = $link->getTranslation($langCode);
    $link->set('content_translation_status', $form_state->getValue('status')['value'])
      ->save();
  }
}
