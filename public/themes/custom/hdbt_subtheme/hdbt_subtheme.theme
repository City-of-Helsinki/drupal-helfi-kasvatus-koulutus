<?php

/**
 * @file
 * Functions to support theming in the HDBT Subtheme.
 */

declare(strict_types=1);

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Url;
use Drupal\helfi_group\GroupUtility;
use Drupal\helfi_tpr\Entity\Unit;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
    $variables['content']['#attributes']['block_id'] = $variables['elements']['#id'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_subtheme_theme_suggestions_block_alter(&$suggestions) {
  // Load theme suggestions for blocks from parent theme.
  foreach ($suggestions as &$suggestion) {
    $suggestion = str_replace('hdbt_subtheme_', '', $suggestion);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_subtheme_theme_suggestions_menu_alter(&$suggestions, $variables) {
  if (isset($variables['attributes']['block_id'])) {
    $block_id = str_replace('hdbt_subtheme_', '', $variables['attributes']['block_id']);

    $suggestions[] = match ($block_id) {
      'mobile_navigation' => 'menu__mobile',
      'mainnavigation' => 'menu__main__desktop',
      'main_navigation_level_2' => 'menu__main__sidebar',
      'brandingnavigation' => 'menu__main__branding',
      default => 'menu__' . $variables['attributes']['block_id'],
    };
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function hdbt_subtheme_preprocess_paragraph(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $paragraph_type = $paragraph->getType();

  // High school & vocational school search paragraphs.
  $search_types = [
    'high_school_search' => 'hs',
    'vocational_school_search' => 'vs',
  ];

  foreach ($search_types as $search_type => $search_type_prefix) {
    $units_field = "field_{$search_type_prefix}_search_units";
    if (
      $paragraph_type == $search_type &&
      $paragraph->hasField($units_field)
    ) {
      // Get all unit ids what content producer has selected for the unit search
      // view and set them as variables for the template.
      $variables['search_parent_paragraph'] = $paragraph->id();
      $variables[$search_type . '_list'] = implode(',', array_map(function ($unit) {
        return $unit['target_id'];
      }, $paragraph->$units_field->getValue()));
    }
  }

  // Get the group ID for latest group news and group news archive & number of
  // latest news to be displayed from the paragraph to be passed to
  // the template.
  if (
    ($paragraph_type == 'group_news' || $paragraph_type == 'group_news_archive') &&
    $paragraph->hasField('field_group_news_group_id')
  ) {
    $variables['group_id'] = $paragraph->get('field_group_news_group_id')->getString();
  }
  if (
    $paragraph_type == 'group_news' &&
    $paragraph->hasField('field_group_news_number_of_news')
  ) {
    $variables['group_news_number_of_items'] = $paragraph->get('field_group_news_number_of_news')->getString();
  }

  // Latest group news paragraph.
  if (
    $paragraph_type == 'group_news' &&
    $paragraph->hasField('field_group_news_archive')
  ) {
    $variables['group_news_archive_location'] = NULL;
    if ($archive_page = Node::load($paragraph->get('field_group_news_archive')->getString())) {
      if (!$archive_page->isNew()) {
        $variables['group_news_archive_location'] = $archive_page->toUrl('canonical');
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hdbt_subtheme_form_views_exposed_form_alter(&$form, $form_state) {

  // Handle only High school search view form at this point.
  if (!str_starts_with($form['#id'], 'views-exposed-form-high-school-search-block')) {
    return;
  }

  // Get view from form state.
  $view = $form_state->getStorage()['view'];
  [, $paragraph_id] = $view->args + [NULL, NULL];

  if (!$paragraph = Paragraph::load($paragraph_id)) {
    return;
  }

  if ($paragraph->hasField('field_hs_search_meta_button') && !$paragraph->get('field_hs_search_meta_button')->isEmpty()) {
    $form['actions']['submit']['#value'] = $paragraph
      ->get('field_hs_search_meta_button')
      ->value;
  }
  else {
    $form['actions']['submit']['#value'] = t('Search', [], ['context' => 'High school search']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_tpr_unit(&$variables) {
  if (!isset($variables['entity']) || !$variables['entity'] instanceof Unit) {
    return;
  }
  $entity = $variables['entity'];

  if (
    $entity->hasField('field_hs_front_page') &&
    !$entity->field_hs_front_page->isEmpty() &&
    $entity->field_hs_front_page->entity instanceof Node
  ) {
    $nid = $entity->field_hs_front_page->entity->id();
    $title = $entity->field_hs_front_page->entity->getTitle();
    $url = Url::fromRoute('entity.node.canonical', ['node' => $nid]);
    $variables['high_school_card_url'] = $url;
    $variables['high_school_front_page_title'] = $title;
  }
  elseif (
    $entity->hasField('field_hs_front_page') &&
    $entity->hasField('www') &&
    $entity->field_hs_front_page->isEmpty() &&
    !$entity->www->isEmpty()
  ) {
    $uri = $entity->get('www')->first()->getValue()['uri'];
    $url = Url::fromUri($uri);

    // Check if current link is external (not whitelisted) and
    // set data attributes accordingly.
    /** @var \Drupal\helfi_api_base\Link\InternalDomainResolver $resolver */
    $resolver = \Drupal::service('helfi_api_base.internal_domain_resolver');
    $variables['high_school_card_url_external'] = $resolver->isExternal($url);
    $variables['high_school_card_url'] = $url;
  }
  else {
    $variables['high_school_card_url'] = !$entity->isNew() ? $entity->toUrl('canonical') : NULL;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_page(&$variables) {
  // Handle sidebar visibility.
  $entity = hdbt_admin_tools_get_page_entity();
  if ($entity instanceof NodeInterface) {

    // Handle first and second sidebar visibility for the "Standard page" (page)
    // content type.
    if ($entity->getType() === 'page') {
      _hdbt_subtheme_sidebar_menu_visibility($variables, $entity);
    }

    // Handle first and second sidebar visibility for the News item.
    if ($entity->getType() === 'news_item') {
      _hdbt_subtheme_sidebar_menu_visibility($variables, $entity);
    }

    // Show the section navigation on mobile with group content.
    if (!empty(GroupUtility::getGroup($entity))) {
      $variables['has_section_nav'] = TRUE;
    }
  }

  // Handle first and second sidebar visibility for the Unit entity.
  if ($entity instanceof Unit) {
    _hdbt_subtheme_sidebar_menu_visibility($variables, $entity);
  }
}

/**
 * Handle sidebar visibility based on current entity menu links.
 *
 * @param array $variables
 *   Variables array.
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   Content entity, like tpr_service, tpr_unit or node.
 */
function _hdbt_subtheme_sidebar_menu_visibility(array &$variables, ContentEntityInterface $entity) {
  $menu_link_manager = Drupal::service('plugin.manager.menu.link');

  // Load menu links for the current page entity.
  $menu_links = $menu_link_manager->loadLinksByRoute(
    "entity.{$entity->getEntityTypeId()}.canonical",
    [$entity->getEntityTypeId() => $entity->id()]
    // @todo Could check here if the menu is found from the correct group menu.
  );

  // Add "has_sidebar_first" variable
  // if current node has menu link items set.
  if (!empty($menu_links) && is_array($menu_links)) {
    $menu_Link = reset($menu_links);

    // Set has_sidebar_first value true,
    // if menu link is enabled.
    if ($menu_Link->isEnabled()) {
      $variables['has_sidebar_first'] = TRUE;
    }
  }

  // Always show the first sidebar (menu) with group content.
  if (!empty(GroupUtility::getGroup($entity))) {
    $variables['has_sidebar_first'] = TRUE;
  }

  // Hide the sidebar and menu if the current entity has
  // "hide sidebar navigation" value set.
  if (
    $entity->hasField('hide_sidebar_navigation') &&
    boolval($entity->get('hide_sidebar_navigation')->value)
  ) {
    $variables['has_sidebar_first'] = FALSE;
  }
}

/**
 * Implements template_preprocess_views_view().
 */
function hdbt_subtheme_preprocess_views_view(&$variables) {
  $view = $variables['view'];

  if ($view->id() == 'high_school_search') {
    $unit_ids = [];

    foreach ($view->result as $value) {
      $unit_id = $value->_entity->get('id')->value;
      $unit_ids[] = $unit_id;
    }

    $variables['unit_ids'] = $unit_ids;
  }
}

/**
 * Implements template_preprocess_field().
 */
function hdbt_subtheme_preprocess_field(&$variables) {
  if ($variables['field_name'] !== 'provided_languages') {
    return;
  }

  $language_map = [
    'ar' => t('Arabic', [], ['context' => 'Language of instruction']),
    'de' => t('German', [], ['context' => 'Language of instruction']),
    'en' => t('English', [], ['context' => 'Language of instruction']),
    'es' => t('Spanish', [], ['context' => 'Language of instruction']),
    'et' => t('Estonian', [], ['context' => 'Language of instruction']),
    'fa' => t('Persian', [], ['context' => 'Language of instruction']),
    'fi' => t('Finnish', [], ['context' => 'Language of instruction']),
    'fr' => t('French', [], ['context' => 'Language of instruction']),
    'he' => t('Hebrew', [], ['context' => 'Language of instruction']),
    'ja' => t('Japanese', [], ['context' => 'Language of instruction']),
    'pt' => t('Portuguese', [], ['context' => 'Language of instruction']),
    'ru' => t('Russian', [], ['context' => 'Language of instruction']),
    'se' => t('Sami', [], ['context' => 'Language of instruction']),
    'sv' => t('Swedish', [], ['context' => 'Language of instruction']),
    'uk' => t('Ukrainian', [], ['context' => 'Language of instruction']),
    'zh' => t('Chinese', [], ['context' => 'Language of instruction']),
  ];

  foreach ($variables['items'] as &$item) {
    $value = &$item['content']['#context']['value'];
    if (array_key_exists($value, $language_map)) {
      $value = $language_map[$value];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_menu(&$variables): void {
  // Menu, mobile menu, fallback menu and sidebar menu tree depth.
  // Counting from "instance", "main level", "level 3", "level 4", "level 5"...
  $menu_depth = 6;
  $variables['menu_depth'] = $menu_depth;
  $variables['#attached']['drupalSettings']['menu_depth'] = $menu_depth;
}
